{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sumit\\\\Desktop\\\\project\\\\book-csv-editor\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport Papa from 'papaparse';\nimport { faker } from '@faker-js/faker';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Data states\n  const [originalData, setOriginalData] = useState([]);\n  const [currentData, setCurrentData] = useState([]);\n  const [edits, setEdits] = useState(new Map());\n  const [loading, setLoading] = useState(false);\n\n  // UI states\n  const [filterText, setFilterText] = useState('');\n  const [filterGenre, setFilterGenre] = useState('');\n  const [yearRange, setYearRange] = useState({\n    min: 0,\n    max: 9999\n  });\n  const [showOnlyEdited, setShowOnlyEdited] = useState(false);\n  const [sortConfig, setSortConfig] = useState({\n    key: null,\n    direction: 'asc'\n  });\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(25);\n\n  // Columns definition\n  const columns = ['Title', 'Author', 'Genre', 'PublishedYear', 'ISBN'];\n\n  // Generate sample book data\n  const generateBookData = useCallback((count = 10000) => {\n    const genres = ['Science Fiction', 'Fantasy', 'Mystery', 'Romance', 'Non-fiction', 'History', 'Biography', 'Self-help', 'Children', 'Horror'];\n    const books = [];\n    for (let i = 0; i < count; i++) {\n      books.push({\n        id: i + 1,\n        Title: faker.lorem.words({\n          min: 1,\n          max: 5\n        }),\n        Author: `${faker.person.firstName()} ${faker.person.lastName()}`,\n        Genre: genres[Math.floor(Math.random() * genres.length)],\n        PublishedYear: faker.number.int({\n          min: 1800,\n          max: 2023\n        }),\n        ISBN: faker.commerce.isbn(13)\n      });\n    }\n    return books;\n  }, []);\n\n  // Convert books to CSV format\n  const booksToCSV = useCallback(books => {\n    const headers = ['Title', 'Author', 'Genre', 'PublishedYear', 'ISBN'];\n    const csvRows = [headers.join(',')];\n    books.forEach(book => {\n      const row = headers.map(header => {\n        const value = book[header];\n        return `\"${String(value).replace(/\"/g, '\"\"')}\"`;\n      });\n      csvRows.push(row.join(','));\n    });\n    return csvRows.join('\\n');\n  }, []);\n\n  // Handle file upload\n  const handleFileUpload = useCallback(file => {\n    if (!file) return;\n    setLoading(true);\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: results => {\n        const parsedData = results.data.map((row, index) => ({\n          id: index + 1,\n          Title: row.Title || '',\n          Author: row.Author || '',\n          Genre: row.Genre || '',\n          PublishedYear: parseInt(row.PublishedYear) || 0,\n          ISBN: row.ISBN || ''\n        }));\n        setOriginalData(parsedData);\n        setCurrentData(parsedData);\n        setEdits(new Map());\n        setLoading(false);\n        setCurrentPage(1);\n      },\n      error: error => {\n        console.error('Error parsing CSV:', error);\n        setLoading(false);\n        alert('Error parsing CSV file. Please check the format.');\n      }\n    });\n  }, []);\n\n  // Generate sample data\n  const handleGenerateData = useCallback(async (count = 10000) => {\n    setLoading(true);\n    try {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const data = generateBookData(count);\n      setOriginalData(data);\n      setCurrentData(data);\n      setEdits(new Map());\n      setCurrentPage(1);\n    } finally {\n      setLoading(false);\n    }\n  }, [generateBookData]);\n\n  // Update cell value\n  const handleCellEdit = useCallback((rowIndex, column, value) => {\n    setCurrentData(prevData => {\n      const newData = [...prevData];\n      const updatedRow = {\n        ...newData[rowIndex],\n        [column]: value\n      };\n      newData[rowIndex] = updatedRow;\n      setEdits(prevEdits => {\n        const newEdits = new Map(prevEdits);\n        const originalRow = originalData[rowIndex];\n        const hasChanges = columns.some(col => String(updatedRow[col] || '') !== String((originalRow === null || originalRow === void 0 ? void 0 : originalRow[col]) || ''));\n        if (hasChanges) {\n          newEdits.set(rowIndex, updatedRow);\n        } else {\n          newEdits.delete(rowIndex);\n        }\n        return newEdits;\n      });\n      return newData;\n    });\n  }, [originalData, columns]);\n\n  // Reset all edits\n  const handleResetEdits = useCallback(() => {\n    setCurrentData([...originalData]);\n    setEdits(new Map());\n  }, [originalData]);\n\n  // Download CSV\n  const handleDownloadCSV = useCallback(() => {\n    const csvContent = booksToCSV(currentData);\n    const blob = new Blob([csvContent], {\n      type: 'text/csv'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'edited_books.csv';\n    a.click();\n    URL.revokeObjectURL(url);\n  }, [currentData, booksToCSV]);\n\n  // Handle sorting\n  const handleSort = useCallback(key => {\n    setSortConfig(current => ({\n      key,\n      direction: current.key === key && current.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  }, []);\n\n  // Filter and sort data\n  const filteredData = useMemo(() => {\n    let filtered = currentData;\n    if (filterText) {\n      const searchText = filterText.toLowerCase();\n      filtered = filtered.filter(book => Object.values(book).some(value => String(value).toLowerCase().includes(searchText)));\n    }\n    if (filterGenre) {\n      filtered = filtered.filter(book => book.Genre === filterGenre);\n    }\n    filtered = filtered.filter(book => book.PublishedYear >= yearRange.min && book.PublishedYear <= yearRange.max);\n    if (showOnlyEdited) {\n      filtered = filtered.filter((_, index) => edits.has(index));\n    }\n    if (sortConfig.key) {\n      filtered = [...filtered].sort((a, b) => {\n        const aValue = a[sortConfig.key];\n        const bValue = b[sortConfig.key];\n        if (aValue < bValue) {\n          return sortConfig.direction === 'asc' ? -1 : 1;\n        }\n        if (aValue > bValue) {\n          return sortConfig.direction === 'asc' ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return filtered;\n  }, [currentData, filterText, filterGenre, yearRange, showOnlyEdited, sortConfig, edits]);\n\n  // Get unique genres\n  const genres = useMemo(() => {\n    const genreSet = new Set(currentData.map(book => book.Genre).filter(Boolean));\n    return Array.from(genreSet).sort();\n  }, [currentData]);\n\n  // Pagination\n  const totalPages = Math.ceil(filteredData.length / pageSize);\n  const startIndex = (currentPage - 1) * pageSize;\n  const paginatedData = filteredData.slice(startIndex, startIndex + pageSize);\n\n  // Check if a cell is edited\n  const isCellEdited = useCallback((rowIndex, column) => {\n    var _originalData$rowInde, _currentData$rowIndex;\n    if (rowIndex >= originalData.length) return false;\n    const originalValue = ((_originalData$rowInde = originalData[rowIndex]) === null || _originalData$rowInde === void 0 ? void 0 : _originalData$rowInde[column]) || '';\n    const currentValue = ((_currentData$rowIndex = currentData[rowIndex]) === null || _currentData$rowIndex === void 0 ? void 0 : _currentData$rowIndex[column]) || '';\n    return String(originalValue) !== String(currentValue);\n  }, [originalData, currentData]);\n\n  // File input change handler\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      handleFileUpload(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"header\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Book CSV Editor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Upload, edit, and manage your book collection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actions-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"file-upload-btn\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              accept: \".csv\",\n              onChange: handleFileChange,\n              className: \"file-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this), \"\\uD83D\\uDCC1 Upload CSV\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleGenerateData(10000),\n            className: \"btn btn-generate\",\n            disabled: loading,\n            children: loading ? '⏳ Generating...' : '⚡ Generate 10k Data'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleDownloadCSV,\n            disabled: currentData.length === 0,\n            className: \"btn btn-download\",\n            children: \"\\uD83D\\uDCBE Download CSV\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleResetEdits,\n            disabled: edits.size === 0,\n            className: \"btn btn-reset\",\n            children: \"\\uD83D\\uDD04 Reset Edits\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this), currentData.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filters-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"search-box\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\uD83D\\uDD0D Search books...\",\n              value: filterText,\n              onChange: e => setFilterText(e.target.value),\n              className: \"search-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: filterGenre,\n              onChange: e => setFilterGenre(e.target.value),\n              className: \"filter-select\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"All Genres\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 19\n              }, this), genres.map(genre => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: genre,\n                children: genre\n              }, genre, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"year-filter\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                placeholder: \"From year\",\n                value: yearRange.min || '',\n                onChange: e => setYearRange(prev => ({\n                  ...prev,\n                  min: parseInt(e.target.value) || 0\n                })),\n                className: \"year-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"to\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                placeholder: \"To year\",\n                value: yearRange.max === 9999 ? '' : yearRange.max,\n                onChange: e => setYearRange(prev => ({\n                  ...prev,\n                  max: parseInt(e.target.value) || 9999\n                })),\n                className: \"year-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"checkbox-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: showOnlyEdited,\n                onChange: e => setShowOnlyEdited(e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 19\n              }, this), \"Show edited only\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Total: \", currentData.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Filtered: \", filteredData.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Edited: \", edits.size]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Page: \", currentPage, \" of \", totalPages]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table-container\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"data-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"#\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 21\n                }, this), columns.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n                  onClick: () => handleSort(column),\n                  className: \"sortable\",\n                  children: [column, sortConfig.key === column && /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: sortConfig.direction === 'asc' ? ' ↑' : ' ↓'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 368,\n                    columnNumber: 27\n                  }, this)]\n                }, column, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 361,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: paginatedData.map((row, index) => {\n                const absoluteIndex = startIndex + index;\n                const isEdited = edits.has(absoluteIndex);\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  className: isEdited ? 'edited-row' : '',\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"row-number\",\n                    children: absoluteIndex + 1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 381,\n                    columnNumber: 25\n                  }, this), columns.map(column => {\n                    const cellEdited = isCellEdited(absoluteIndex, column);\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: cellEdited ? 'edited-cell' : '',\n                      children: /*#__PURE__*/_jsxDEV(\"input\", {\n                        value: row[column] || '',\n                        onChange: e => handleCellEdit(absoluteIndex, column, e.target.value),\n                        className: \"cell-input\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 387,\n                        columnNumber: 31\n                      }, this)\n                    }, column, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 386,\n                      columnNumber: 29\n                    }, this);\n                  })]\n                }, absoluteIndex, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pagination\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pagination-info\",\n            children: [\"Showing \", (currentPage - 1) * pageSize + 1, \" to \", Math.min(currentPage * pageSize, filteredData.length), \" of \", filteredData.length, \" books\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pagination-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: pageSize,\n              onChange: e => setPageSize(parseInt(e.target.value)),\n              className: \"page-size-select\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: 25,\n                children: \"25 per page\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 50,\n                children: \"50 per page\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 100,\n                children: \"100 per page\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 416,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"page-buttons\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setCurrentPage(1),\n                disabled: currentPage === 1,\n                className: \"page-btn\",\n                children: \"First\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 420,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setCurrentPage(currentPage - 1),\n                disabled: currentPage === 1,\n                className: \"page-btn\",\n                children: \"Previous\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 427,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"page-info\",\n                children: [\"Page \", currentPage, \" of \", totalPages]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setCurrentPage(currentPage + 1),\n                disabled: currentPage === totalPages,\n                className: \"page-btn\",\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setCurrentPage(totalPages),\n                disabled: currentPage === totalPages,\n                className: \"page-btn\",\n                children: \"Last\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : (/* Empty State */\n      !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-state\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"empty-icon\",\n            children: \"\\uD83D\\uDCDA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Welcome to Book Editor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Get started by uploading a CSV file or generating sample data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"empty-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"btn btn-primary\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                accept: \".csv\",\n                onChange: handleFileChange,\n                className: \"file-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 465,\n                columnNumber: 21\n              }, this), \"Upload CSV File\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleGenerateData(10000),\n              className: \"btn btn-secondary\",\n              children: \"Generate Sample Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"iuS9WTIheqm6Cixz9D+Yfl0SfHU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","Papa","faker","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","originalData","setOriginalData","currentData","setCurrentData","edits","setEdits","Map","loading","setLoading","filterText","setFilterText","filterGenre","setFilterGenre","yearRange","setYearRange","min","max","showOnlyEdited","setShowOnlyEdited","sortConfig","setSortConfig","key","direction","currentPage","setCurrentPage","pageSize","setPageSize","columns","generateBookData","count","genres","books","i","push","id","Title","lorem","words","Author","person","firstName","lastName","Genre","Math","floor","random","length","PublishedYear","number","int","ISBN","commerce","isbn","booksToCSV","headers","csvRows","join","forEach","book","row","map","header","value","String","replace","handleFileUpload","file","parse","skipEmptyLines","complete","results","parsedData","data","index","parseInt","error","console","alert","handleGenerateData","Promise","resolve","setTimeout","handleCellEdit","rowIndex","column","prevData","newData","updatedRow","prevEdits","newEdits","originalRow","hasChanges","some","col","set","delete","handleResetEdits","handleDownloadCSV","csvContent","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","handleSort","current","filteredData","filtered","searchText","toLowerCase","filter","Object","values","includes","_","has","sort","b","aValue","bValue","genreSet","Set","Boolean","Array","from","totalPages","ceil","startIndex","paginatedData","slice","isCellEdited","_originalData$rowInde","_currentData$rowIndex","originalValue","currentValue","handleFileChange","event","target","files","className","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","disabled","size","placeholder","e","genre","prev","checked","absoluteIndex","isEdited","cellEdited","_c","$RefreshReg$"],"sources":["C:/Users/Sumit/Desktop/project/book-csv-editor/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport Papa from 'papaparse';\nimport { faker } from '@faker-js/faker';\nimport './App.css';\n\nfunction App() {\n  // Data states\n  const [originalData, setOriginalData] = useState([]);\n  const [currentData, setCurrentData] = useState([]);\n  const [edits, setEdits] = useState(new Map());\n  const [loading, setLoading] = useState(false);\n\n  // UI states\n  const [filterText, setFilterText] = useState('');\n  const [filterGenre, setFilterGenre] = useState('');\n  const [yearRange, setYearRange] = useState({ min: 0, max: 9999 });\n  const [showOnlyEdited, setShowOnlyEdited] = useState(false);\n  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(25);\n\n  // Columns definition\n  const columns = ['Title', 'Author', 'Genre', 'PublishedYear', 'ISBN'];\n\n  // Generate sample book data\n  const generateBookData = useCallback((count = 10000) => {\n    const genres = [\n      'Science Fiction', 'Fantasy', 'Mystery', 'Romance', 'Non-fiction',\n      'History', 'Biography', 'Self-help', 'Children', 'Horror'\n    ];\n\n    const books = [];\n    for (let i = 0; i < count; i++) {\n      books.push({\n        id: i + 1,\n        Title: faker.lorem.words({ min: 1, max: 5 }),\n        Author: `${faker.person.firstName()} ${faker.person.lastName()}`,\n        Genre: genres[Math.floor(Math.random() * genres.length)],\n        PublishedYear: faker.number.int({ min: 1800, max: 2023 }),\n        ISBN: faker.commerce.isbn(13)\n      });\n    }\n    return books;\n  }, []);\n\n  // Convert books to CSV format\n  const booksToCSV = useCallback((books) => {\n    const headers = ['Title', 'Author', 'Genre', 'PublishedYear', 'ISBN'];\n    const csvRows = [headers.join(',')];\n    \n    books.forEach(book => {\n      const row = headers.map(header => {\n        const value = book[header];\n        return `\"${String(value).replace(/\"/g, '\"\"')}\"`;\n      });\n      csvRows.push(row.join(','));\n    });\n    \n    return csvRows.join('\\n');\n  }, []);\n\n  // Handle file upload\n  const handleFileUpload = useCallback((file) => {\n    if (!file) return;\n    \n    setLoading(true);\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: (results) => {\n        const parsedData = results.data.map((row, index) => ({\n          id: index + 1,\n          Title: row.Title || '',\n          Author: row.Author || '',\n          Genre: row.Genre || '',\n          PublishedYear: parseInt(row.PublishedYear) || 0,\n          ISBN: row.ISBN || ''\n        }));\n        \n        setOriginalData(parsedData);\n        setCurrentData(parsedData);\n        setEdits(new Map());\n        setLoading(false);\n        setCurrentPage(1);\n      },\n      error: (error) => {\n        console.error('Error parsing CSV:', error);\n        setLoading(false);\n        alert('Error parsing CSV file. Please check the format.');\n      }\n    });\n  }, []);\n\n  // Generate sample data\n  const handleGenerateData = useCallback(async (count = 10000) => {\n    setLoading(true);\n    try {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const data = generateBookData(count);\n      setOriginalData(data);\n      setCurrentData(data);\n      setEdits(new Map());\n      setCurrentPage(1);\n    } finally {\n      setLoading(false);\n    }\n  }, [generateBookData]);\n\n  // Update cell value\n  const handleCellEdit = useCallback((rowIndex, column, value) => {\n    setCurrentData(prevData => {\n      const newData = [...prevData];\n      const updatedRow = { ...newData[rowIndex], [column]: value };\n      newData[rowIndex] = updatedRow;\n      \n      setEdits(prevEdits => {\n        const newEdits = new Map(prevEdits);\n        const originalRow = originalData[rowIndex];\n        \n        const hasChanges = columns.some(col => \n          String(updatedRow[col] || '') !== String(originalRow?.[col] || '')\n        );\n        \n        if (hasChanges) {\n          newEdits.set(rowIndex, updatedRow);\n        } else {\n          newEdits.delete(rowIndex);\n        }\n        \n        return newEdits;\n      });\n      \n      return newData;\n    });\n  }, [originalData, columns]);\n\n  // Reset all edits\n  const handleResetEdits = useCallback(() => {\n    setCurrentData([...originalData]);\n    setEdits(new Map());\n  }, [originalData]);\n\n  // Download CSV\n  const handleDownloadCSV = useCallback(() => {\n    const csvContent = booksToCSV(currentData);\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'edited_books.csv';\n    a.click();\n    URL.revokeObjectURL(url);\n  }, [currentData, booksToCSV]);\n\n  // Handle sorting\n  const handleSort = useCallback((key) => {\n    setSortConfig(current => ({\n      key,\n      direction: current.key === key && current.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  }, []);\n\n  // Filter and sort data\n  const filteredData = useMemo(() => {\n    let filtered = currentData;\n\n    if (filterText) {\n      const searchText = filterText.toLowerCase();\n      filtered = filtered.filter(book =>\n        Object.values(book).some(value =>\n          String(value).toLowerCase().includes(searchText)\n        )\n      );\n    }\n\n    if (filterGenre) {\n      filtered = filtered.filter(book => book.Genre === filterGenre);\n    }\n\n    filtered = filtered.filter(book =>\n      book.PublishedYear >= yearRange.min && book.PublishedYear <= yearRange.max\n    );\n\n    if (showOnlyEdited) {\n      filtered = filtered.filter((_, index) => edits.has(index));\n    }\n\n    if (sortConfig.key) {\n      filtered = [...filtered].sort((a, b) => {\n        const aValue = a[sortConfig.key];\n        const bValue = b[sortConfig.key];\n        \n        if (aValue < bValue) {\n          return sortConfig.direction === 'asc' ? -1 : 1;\n        }\n        if (aValue > bValue) {\n          return sortConfig.direction === 'asc' ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n\n    return filtered;\n  }, [currentData, filterText, filterGenre, yearRange, showOnlyEdited, sortConfig, edits]);\n\n  // Get unique genres\n  const genres = useMemo(() => {\n    const genreSet = new Set(currentData.map(book => book.Genre).filter(Boolean));\n    return Array.from(genreSet).sort();\n  }, [currentData]);\n\n  // Pagination\n  const totalPages = Math.ceil(filteredData.length / pageSize);\n  const startIndex = (currentPage - 1) * pageSize;\n  const paginatedData = filteredData.slice(startIndex, startIndex + pageSize);\n\n  // Check if a cell is edited\n  const isCellEdited = useCallback((rowIndex, column) => {\n    if (rowIndex >= originalData.length) return false;\n    const originalValue = originalData[rowIndex]?.[column] || '';\n    const currentValue = currentData[rowIndex]?.[column] || '';\n    return String(originalValue) !== String(currentValue);\n  }, [originalData, currentData]);\n\n  // File input change handler\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      handleFileUpload(file);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        {/* Header */}\n        <header className=\"header\">\n          <div className=\"header-content\">\n            <h1>Book CSV Editor</h1>\n            <p>Upload, edit, and manage your book collection</p>\n          </div>\n        </header>\n\n        {/* Main Actions */}\n        <div className=\"actions-section\">\n          <div className=\"action-buttons\">\n            <label className=\"file-upload-btn\">\n              <input\n                type=\"file\"\n                accept=\".csv\"\n                onChange={handleFileChange}\n                className=\"file-input\"\n              />\n              📁 Upload CSV\n            </label>\n            \n            <button\n              onClick={() => handleGenerateData(10000)}\n              className=\"btn btn-generate\"\n              disabled={loading}\n            >\n              {loading ? '⏳ Generating...' : '⚡ Generate 10k Data'}\n            </button>\n            \n            <button\n              onClick={handleDownloadCSV}\n              disabled={currentData.length === 0}\n              className=\"btn btn-download\"\n            >\n              💾 Download CSV\n            </button>\n            \n            <button\n              onClick={handleResetEdits}\n              disabled={edits.size === 0}\n              className=\"btn btn-reset\"\n            >\n              🔄 Reset Edits\n            </button>\n          </div>\n        </div>\n\n        {loading && (\n          <div className=\"loading\">\n            <div className=\"spinner\"></div>\n            <p>Loading data...</p>\n          </div>\n        )}\n\n        {currentData.length > 0 ? (\n          <>\n            {/* Filters */}\n            <div className=\"filters-section\">\n              <div className=\"search-box\">\n                <input\n                  type=\"text\"\n                  placeholder=\"🔍 Search books...\"\n                  value={filterText}\n                  onChange={(e) => setFilterText(e.target.value)}\n                  className=\"search-input\"\n                />\n              </div>\n\n              <div className=\"filter-controls\">\n                <select\n                  value={filterGenre}\n                  onChange={(e) => setFilterGenre(e.target.value)}\n                  className=\"filter-select\"\n                >\n                  <option value=\"\">All Genres</option>\n                  {genres.map(genre => (\n                    <option key={genre} value={genre}>{genre}</option>\n                  ))}\n                </select>\n\n                <div className=\"year-filter\">\n                  <input\n                    type=\"number\"\n                    placeholder=\"From year\"\n                    value={yearRange.min || ''}\n                    onChange={(e) => setYearRange(prev => ({ ...prev, min: parseInt(e.target.value) || 0 }))}\n                    className=\"year-input\"\n                  />\n                  <span>to</span>\n                  <input\n                    type=\"number\"\n                    placeholder=\"To year\"\n                    value={yearRange.max === 9999 ? '' : yearRange.max}\n                    onChange={(e) => setYearRange(prev => ({ ...prev, max: parseInt(e.target.value) || 9999 }))}\n                    className=\"year-input\"\n                  />\n                </div>\n\n                <label className=\"checkbox-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={showOnlyEdited}\n                    onChange={(e) => setShowOnlyEdited(e.target.checked)}\n                  />\n                  Show edited only\n                </label>\n              </div>\n\n              {/* Stats */}\n              <div className=\"stats\">\n                <span>Total: {currentData.length}</span>\n                <span>Filtered: {filteredData.length}</span>\n                <span>Edited: {edits.size}</span>\n                <span>Page: {currentPage} of {totalPages}</span>\n              </div>\n            </div>\n\n            {/* Data Table */}\n            <div className=\"table-container\">\n              <table className=\"data-table\">\n                <thead>\n                  <tr>\n                    <th>#</th>\n                    {columns.map(column => (\n                      <th \n                        key={column}\n                        onClick={() => handleSort(column)}\n                        className=\"sortable\"\n                      >\n                        {column}\n                        {sortConfig.key === column && (\n                          <span>{sortConfig.direction === 'asc' ? ' ↑' : ' ↓'}</span>\n                        )}\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {paginatedData.map((row, index) => {\n                    const absoluteIndex = startIndex + index;\n                    const isEdited = edits.has(absoluteIndex);\n                    \n                    return (\n                      <tr key={absoluteIndex} className={isEdited ? 'edited-row' : ''}>\n                        <td className=\"row-number\">{absoluteIndex + 1}</td>\n                        {columns.map(column => {\n                          const cellEdited = isCellEdited(absoluteIndex, column);\n                          \n                          return (\n                            <td key={column} className={cellEdited ? 'edited-cell' : ''}>\n                              <input\n                                value={row[column] || ''}\n                                onChange={(e) => handleCellEdit(absoluteIndex, column, e.target.value)}\n                                className=\"cell-input\"\n                              />\n                            </td>\n                          );\n                        })}\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n\n            {/* Pagination */}\n            <div className=\"pagination\">\n              <div className=\"pagination-info\">\n                Showing {((currentPage - 1) * pageSize) + 1} to {Math.min(currentPage * pageSize, filteredData.length)} of {filteredData.length} books\n              </div>\n              \n              <div className=\"pagination-controls\">\n                <select\n                  value={pageSize}\n                  onChange={(e) => setPageSize(parseInt(e.target.value))}\n                  className=\"page-size-select\"\n                >\n                  <option value={25}>25 per page</option>\n                  <option value={50}>50 per page</option>\n                  <option value={100}>100 per page</option>\n                </select>\n\n                <div className=\"page-buttons\">\n                  <button \n                    onClick={() => setCurrentPage(1)} \n                    disabled={currentPage === 1}\n                    className=\"page-btn\"\n                  >\n                    First\n                  </button>\n                  <button \n                    onClick={() => setCurrentPage(currentPage - 1)} \n                    disabled={currentPage === 1}\n                    className=\"page-btn\"\n                  >\n                    Previous\n                  </button>\n                  \n                  <span className=\"page-info\">Page {currentPage} of {totalPages}</span>\n                  \n                  <button \n                    onClick={() => setCurrentPage(currentPage + 1)} \n                    disabled={currentPage === totalPages}\n                    className=\"page-btn\"\n                  >\n                    Next\n                  </button>\n                  <button \n                    onClick={() => setCurrentPage(totalPages)} \n                    disabled={currentPage === totalPages}\n                    className=\"page-btn\"\n                  >\n                    Last\n                  </button>\n                </div>\n              </div>\n            </div>\n          </>\n        ) : (\n          /* Empty State */\n          !loading && (\n            <div className=\"empty-state\">\n              <div className=\"empty-content\">\n                <div className=\"empty-icon\">📚</div>\n                <h2>Welcome to Book Editor</h2>\n                <p>Get started by uploading a CSV file or generating sample data</p>\n                <div className=\"empty-actions\">\n                  <label className=\"btn btn-primary\">\n                    <input\n                      type=\"file\"\n                      accept=\".csv\"\n                      onChange={handleFileChange}\n                      className=\"file-input\"\n                    />\n                    Upload CSV File\n                  </label>\n                  <button\n                    onClick={() => handleGenerateData(10000)}\n                    className=\"btn btn-secondary\"\n                  >\n                    Generate Sample Data\n                  </button>\n                </div>\n              </div>\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}